// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos-demo/internal/biz"
	"kratos-demo/internal/conf"
	"kratos-demo/internal/data"
	"kratos-demo/internal/server"
	"kratos-demo/internal/service"
	"kratos-demo/internal/service_gin"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, jwt *conf.JWT, logger log.Logger) (*kratos.App, func(), error) {
	db, err := data.NewGormDB(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(logger, db)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	studentRepo := data.NewstudentRepo(dataData, logger)
	studentUsercase := biz.NewStudentUsercase(studentRepo, logger, jwt)
	studentService := service.NewStudentService(studentUsercase)
	grpcServer := server.NewGRPCServer(confServer, greeterService, studentService, logger)
	bizGinRepo := data.NewGinRepo(dataData, logger)
	ginUsecase := biz.NewGinUsecase(logger, bizGinRepo)
	ginService := service_gin.NewGinService(greeterService, logger, ginUsecase)
	httpServer := server.NewHTTPServer(confServer, greeterService, studentService, ginService, logger, jwt)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
